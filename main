
#include <iostream>
#include <algorithm>
#include <stack>
#include <string>
#include <fstream>
#include <vector>



using namespace std;
//
//vector<string> XML_detection(vector <string> s){
//
//    stack <string> st;
//    stack <string> m;
//    vector <string> errors;
//    string c="</";
//    for(int i=0;i<s.size();i++){
//        if(st.empty()){
//            st.push(s[i]);
//
//        }
//        else if(s[i].substr(0, 2) != c) // it means that it is  an opening tag
//        {
//            st.push(s[i]);
//        }
//        else { // it is a closing tag
//            if (s[i].substr(2 , s[i].length() - 2) == st.top().substr(1 , st.top().size() - 1)) {
//                st.pop();
//            }
//            else{
//                m.push(s[i]);
//            }
//        }
//
//    }
//    while(!st.empty()){
//        errors.push_back(st.top());
//        st.pop();
//    }
//
//    return errors;
//
//}



vector<string> extractTags(const string& xmlContent) {
    vector<string> tags;
    size_t pos = 0;
    while ((pos = xmlContent.find('<', pos)) != string::npos) {
        size_t endPos = xmlContent.find('>', pos);
        if (endPos != string::npos) {
            tags.push_back(xmlContent.substr(pos, endPos - pos + 1));
            pos = endPos + 1;
        } else {
            break; // Malformed XML
        }
    }
    return tags;
}

// XML detection function
vector<string> XML_detection(const string& xmlContent) {
    vector<string> tags = extractTags(xmlContent);
    stack<string> st;
    stack<string> m;
    vector<string> errors;
    string c = "</";

    for (const string& tag : tags) {
        if (st.empty()) {
            st.push(tag);
        } else if (tag.substr(0, 2) != c) { // Opening tag
            st.push(tag);
        } else { // Closing tag
            if (tag.substr(2, tag.length() - 3) == st.top().substr(1, st.top().size() - 2)) {
                st.pop();
            } else {
                m.push(tag);
            }
        }
    }

    // Collect unbalanced tags
    while (!st.empty()) {
        errors.push_back(st.top());
        st.pop();
    }

    return errors;
}

int main() {

    string fileName = "sample.xml"; // Name of the XML file
    ifstream xmlFile(fileName);
    if (!xmlFile.is_open()) {
        cerr << "Error: Could not open file " << fileName << endl;
        return 1; // Exit with error code
    }
    string xmlContent, line;

    // Read the file line by line
    while (getline(xmlFile, line)) {
        xmlContent += line + "\n"; // Append each line to the xmlContent string
    }

    xmlFile.close(); // Close the file

    cout << xmlContent << endl;
//
//    vector<string>s={"<div>","<div/>","<body>","<ganna>","<am>","<am/>","<div>","<div/>","<ID>","<ID/>","<body>","<body/>","<div>","<div/>"};
    vector<string> hamada = XML_detection(xmlContent);
    for(int i=0;i<hamada.size();i++){
       cout<< hamada[i]<<" ";
    }
    cout<<endl<<hamada.size();

}
